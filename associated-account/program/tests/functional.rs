use solana_program::{instruction::*, program_pack::Pack, pubkey::Pubkey, system_instruction};
use solana_program_test::*;
use solana_sdk::{
    signature::Signer,
    transaction::{Transaction, TransactionError},
};
use speedy::Writable;
use spl_associated_account::{instruction::*, token::*, *};

fn program_test() -> ProgramTest {
    let mut pc = ProgramTest::new(
        "spl_associated_account",
        id(),
        // TODO: BPF only until native CPI rework in the monorepo completes
        None, //processor!(processor::process_instruction),
    );

    // Add Token program
    pc.add_program(
        "spl_token",
        spl_token::id(),
        processor!(spl_token::processor::Processor::process),
    );

    // Dial down the BPF compute budget to detect if the program gets bloated in the future
    pc.set_bpf_compute_max_units(50_000);

    pc
}

fn program_test_with_mint(token_mint_address: Pubkey) -> ProgramTest {
    let mut pc = program_test();

    // Add a token mint account
    //
    // The account data was generated by running:
    //      $ solana account EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v \
    //                       --output-file tests/fixtures/token-mint-data.bin
    //
    pc.add_account_with_file_data(
        token_mint_address,
        1461600,
        spl_token::id(),
        "token-mint-data.bin",
    );
    pc
}

#[tokio::test]
async fn test_associated_token_account() {
    let user_wallet_address = Pubkey::new_unique();
    let token_mint_address = Pubkey::new_unique();
    let associated_token_account =
        get_associated_token_address(&user_wallet_address, &token_mint_address);

    let StartOutputs {
        mut banks_client,
        payer,
        recent_blockhash,
        rent,
        ..
    } = program_test_with_mint(token_mint_address).start().await;

    // Associated account does not exist
    assert_eq!(
        banks_client
            .get_account(associated_token_account)
            .await
            .expect("get_account"),
        None,
    );

    let mut transaction = Transaction::new_with_payer(
        &[create_associated_token_account(
            &user_wallet_address,
            &token_mint_address,
            &payer.pubkey(),
            &rent,
        )],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);
    banks_client.process_transaction(transaction).await.unwrap();

    // Associated account now exists
    let associated_account = banks_client
        .get_account(associated_token_account)
        .await
        .expect("get_account")
        .expect("associated_account not none");
    assert_eq!(
        associated_account.data.len(),
        spl_token::state::Account::LEN
    );
    assert_eq!(associated_account.owner, spl_token::id());
    assert_eq!(
        associated_account.lamports,
        rent.minimum_balance(associated_account.data.len())
    );
}

#[tokio::test]
async fn test_invalid_instruction_data() {
    let StartOutputs {
        mut banks_client,
        payer,
        recent_blockhash,
        ..
    } = program_test().start().await;

    let mut transaction = Transaction::new_with_payer(
        &[Instruction {
            program_id: id(),
            accounts: vec![],
            data: vec![1, 2, 3],
        }],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);

    assert_eq!(
        banks_client
            .process_transaction(transaction)
            .await
            .unwrap_err()
            .unwrap(),
        TransactionError::InstructionError(0, InstructionError::InvalidInstructionData)
    );
}

#[tokio::test]
async fn test_create_with_a_lamport() {
    let primary_account_address = Pubkey::new_unique();
    let associated_account_program_id = Pubkey::new_unique();

    let assocated_account_address = get_associated_address_and_bump_seed(
        &primary_account_address,
        &associated_account_program_id,
        &[],
    )
    .0;

    let StartOutputs {
        mut banks_client,
        payer,
        recent_blockhash,
        ..
    } = program_test().start().await;

    // Transfer 1 lamport into `assocated_account_address` before creating it
    let mut transaction = Transaction::new_with_payer(
        &[system_instruction::transfer(
            &payer.pubkey(),
            &assocated_account_address,
            1,
        )],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);
    banks_client.process_transaction(transaction).await.unwrap();

    // Check that the program adds the extra lamports
    assert_eq!(
        banks_client
            .get_balance(assocated_account_address)
            .await
            .unwrap(),
        1
    );

    let mut transaction = Transaction::new_with_payer(
        &[Instruction {
            program_id: id(),
            accounts: vec![
                AccountMeta::new(assocated_account_address, false),
                AccountMeta::new_readonly(primary_account_address, false),
                AccountMeta::new_readonly(associated_account_program_id, false),
                AccountMeta::new(payer.pubkey(), true),
                AccountMeta::new_readonly(solana_program::system_program::id(), false),
            ],
            data: InstructionData {
                lamports: 2,
                space: 0,
            }
            .write_to_vec()
            .unwrap(),
        }],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);
    banks_client.process_transaction(transaction).await.unwrap();

    assert_eq!(
        banks_client
            .get_balance(assocated_account_address)
            .await
            .unwrap(),
        2
    );
}

#[tokio::test]
async fn test_create_with_excess_lamports() {
    let primary_account_address = Pubkey::new_unique();
    let associated_account_program_id = Pubkey::new_unique();

    let assocated_account_address = get_associated_address_and_bump_seed(
        &primary_account_address,
        &associated_account_program_id,
        &[],
    )
    .0;

    let StartOutputs {
        mut banks_client,
        payer,
        recent_blockhash,
        ..
    } = program_test().start().await;

    // Transfer 100 lamports into `assocated_account_address` before creating it
    let mut transaction = Transaction::new_with_payer(
        &[system_instruction::transfer(
            &payer.pubkey(),
            &assocated_account_address,
            100,
        )],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);
    banks_client.process_transaction(transaction).await.unwrap();

    // Check the program adds no more lamports
    assert_eq!(
        banks_client
            .get_balance(assocated_account_address)
            .await
            .unwrap(),
        100
    );

    let mut transaction = Transaction::new_with_payer(
        &[Instruction {
            program_id: id(),
            accounts: vec![
                AccountMeta::new(assocated_account_address, false),
                AccountMeta::new_readonly(primary_account_address, false),
                AccountMeta::new_readonly(associated_account_program_id, false),
                AccountMeta::new(payer.pubkey(), true),
                AccountMeta::new_readonly(solana_program::system_program::id(), false),
            ],
            data: InstructionData {
                lamports: 2,
                space: 0,
            }
            .write_to_vec()
            .unwrap(),
        }],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);
    banks_client.process_transaction(transaction).await.unwrap();

    assert_eq!(
        banks_client
            .get_balance(assocated_account_address)
            .await
            .unwrap(),
        100
    );
}

#[tokio::test]
async fn test_create_account_mismatch() {
    let primary_account_address = Pubkey::new_unique();
    let associated_account_program_id = Pubkey::new_unique();

    let assocated_account_address = get_associated_address_and_bump_seed(
        &primary_account_address,
        &associated_account_program_id,
        &[],
    )
    .0;

    let StartOutputs {
        mut banks_client,
        payer,
        recent_blockhash,
        ..
    } = program_test().start().await;

    let mut transaction = Transaction::new_with_payer(
        &[Instruction {
            program_id: id(),
            accounts: vec![
                AccountMeta::new(Pubkey::default(), false), // <-- Invalid default_token_account_address
                AccountMeta::new_readonly(primary_account_address, false),
                AccountMeta::new_readonly(associated_account_program_id, false),
                AccountMeta::new(payer.pubkey(), true),
                AccountMeta::new_readonly(solana_program::system_program::id(), false),
            ],
            data: InstructionData {
                lamports: 1,
                space: 0,
            }
            .write_to_vec()
            .unwrap(),
        }],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);
    assert_eq!(
        banks_client
            .process_transaction(transaction)
            .await
            .unwrap_err()
            .unwrap(),
        TransactionError::InstructionError(0, InstructionError::InvalidSeeds)
    );

    let mut transaction = Transaction::new_with_payer(
        &[Instruction {
            program_id: id(),
            accounts: vec![
                AccountMeta::new(assocated_account_address, false),
                AccountMeta::new_readonly(primary_account_address, false),
                AccountMeta::new_readonly(associated_account_program_id, false),
                AccountMeta::new(payer.pubkey(), true),
                AccountMeta::new_readonly(solana_program::system_program::id(), false),
                AccountMeta::new(Pubkey::default(), false), // <-- Extra address seed
            ],
            data: InstructionData {
                lamports: 1,
                space: 0,
            }
            .write_to_vec()
            .unwrap(),
        }],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);
    assert_eq!(
        banks_client
            .process_transaction(transaction)
            .await
            .unwrap_err()
            .unwrap(),
        TransactionError::InstructionError(0, InstructionError::InvalidSeeds)
    );
}
