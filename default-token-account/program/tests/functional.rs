use solana_program::{
    instruction::InstructionError, program_pack::Pack, pubkey::Pubkey, system_instruction,
    sysvar::rent::Rent,
};
use solana_program_test::*;
use solana_sdk::{
    signature::Signer,
    transaction::{Transaction, TransactionError},
};
use spl_default_token_account::{
    error::DefaultTokenAccountError, get_default_token_account_address, id, instruction, processor,
};

fn program_test() -> ProgramTest {
    let mut pc = ProgramTest::new(
        "spl_default_token_account",
        id(),
        processor!(processor::process_instruction),
    );

    // TODO: prefer BPF until native CPI rework in the monorepo completes
    pc.prefer_bpf(true);

    // Add Token program
    pc.add_program(
        "spl_token",
        spl_token::id(),
        processor!(spl_token::processor::Processor::process),
    );

    // Dial down the BPF compute budget to detect if the program gets bloated in the future
    pc.set_bpf_compute_max_units(50_000);

    pc
}

fn program_test_with_mint(token_mint_address: Pubkey) -> ProgramTest {
    let mut pc = program_test();

    // Add a token mint account
    //
    // The account data was generated by running:
    //      $ solana account EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v \
    //                       --output-file tests/fixtures/token-mint-data.bin
    //
    pc.add_account_with_file_data(
        token_mint_address,
        1461600,
        spl_token::id(),
        "token-mint-data.bin",
    );
    pc
}

#[tokio::test]
async fn test_sanity() {
    let user_wallet_address = Pubkey::new_unique();
    let token_mint_address = Pubkey::new_unique();
    let default_token_account_address = get_default_token_account_address(
        &id(),
        &spl_token::id(),
        &token_mint_address,
        &user_wallet_address,
    );

    let (mut banks_client, payer, recent_blockhash) = program_test_with_mint(token_mint_address).start().await;

    let mut transaction = Transaction::new_with_payer(
        &[instruction::create(
            &default_token_account_address,
            &user_wallet_address,
            &token_mint_address,
            &payer.pubkey(),
        )],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);
    banks_client.process_transaction(transaction).await.unwrap();

    let mut transaction = Transaction::new_with_payer(
        &[instruction::exists(
            &default_token_account_address,
            &user_wallet_address,
            &token_mint_address,
        )],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);
    banks_client.process_transaction(transaction).await.unwrap();
}

#[tokio::test]
async fn test_create_account_mismatch() {
    let user_wallet_address = Pubkey::new_unique();
    let token_mint_address = Pubkey::new_unique();

    let (mut banks_client, payer, recent_blockhash) = program_test_with_mint(token_mint_address).start().await;

    let mut transaction = Transaction::new_with_payer(
        &[instruction::create(
            &Pubkey::default(), // <-- Invalid default_token_account_address
            &user_wallet_address,
            &token_mint_address,
            &payer.pubkey(),
        )],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);

    assert_eq!(
        banks_client
            .process_transaction(transaction)
            .await
            .unwrap_err()
            .unwrap(),
        TransactionError::InstructionError(
            0,
            DefaultTokenAccountError::InvalidDefaultTokenAccountAddress.into()
        )
    );
}

#[tokio::test]
async fn test_create_with_a_lamport() {
    let user_wallet_address = Pubkey::new_unique();
    let token_mint_address = Pubkey::new_unique();
    let default_token_account_address = get_default_token_account_address(
        &id(),
        &spl_token::id(),
        &token_mint_address,
        &user_wallet_address,
    );

    let (mut banks_client, payer, recent_blockhash) = program_test_with_mint(token_mint_address).start().await;

    let expected_account_balance = Rent::default().minimum_balance(spl_token::state::Account::LEN);

    // Transfer 1 lamport into `default_token_account_address` before creating it
    let mut transaction = Transaction::new_with_payer(
        &[system_instruction::transfer(
            &payer.pubkey(),
            &default_token_account_address,
            1,
        )],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);
    banks_client.process_transaction(transaction).await.unwrap();

    let mut transaction = Transaction::new_with_payer(
        &[instruction::create(
            &default_token_account_address,
            &user_wallet_address,
            &token_mint_address,
            &payer.pubkey(),
        )],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);
    banks_client.process_transaction(transaction).await.unwrap();

    // The program added the extra lamports
    assert_eq!(
        banks_client
            .get_balance(default_token_account_address)
            .await
            .unwrap(),
        expected_account_balance
    );
}

#[tokio::test]
async fn test_create_with_excess_lamports() {
    let user_wallet_address = Pubkey::new_unique();
    let token_mint_address = Pubkey::new_unique();
    let default_token_account_address = get_default_token_account_address(
        &id(),
        &spl_token::id(),
        &token_mint_address,
        &user_wallet_address,
    );

    let (mut banks_client, payer, recent_blockhash) = program_test_with_mint(token_mint_address).start().await;

    let expected_account_balance = Rent::default().minimum_balance(spl_token::state::Account::LEN);

    // Transfer 2x the minimum lamports into `default_token_account_address` before creating it
    let mut transaction = Transaction::new_with_payer(
        &[system_instruction::transfer(
            &payer.pubkey(),
            &default_token_account_address,
            expected_account_balance * 2,
        )],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);
    banks_client.process_transaction(transaction).await.unwrap();

    let mut transaction = Transaction::new_with_payer(
        &[instruction::create(
            &default_token_account_address,
            &user_wallet_address,
            &token_mint_address,
            &payer.pubkey(),
        )],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);
    banks_client.process_transaction(transaction).await.unwrap();

    // Program didn't add any lamports
    assert_eq!(
        banks_client
            .get_balance(default_token_account_address)
            .await
            .unwrap(),
        expected_account_balance * 2
    );
}

#[tokio::test]
async fn test_exists_account_mismatch() {
    let user_wallet_address = Pubkey::new_unique();
    let token_mint_address = Pubkey::new_unique();

    let (mut banks_client, payer, recent_blockhash) = program_test().start().await;

    let mut transaction = Transaction::new_with_payer(
        &[instruction::exists(
            &Pubkey::default(), // <-- Invalid default_token_account_address
            &user_wallet_address,
            &token_mint_address,
        )],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);

    assert_eq!(
        banks_client
            .process_transaction(transaction)
            .await
            .unwrap_err()
            .unwrap(),
        TransactionError::InstructionError(
            0,
            DefaultTokenAccountError::InvalidDefaultTokenAccountAddress.into()
        )
    );
}

#[tokio::test]
async fn test_exists_invalid_account() {
    let user_wallet_address = Pubkey::new_unique();
    let token_mint_address = Pubkey::new_unique();
    let default_token_account_address = get_default_token_account_address(
        &id(),
        &spl_token::id(),
        &token_mint_address,
        &user_wallet_address,
    );

    let mut tc = program_test();
    // Add an invalid account at `default_token_account_address`
    tc.add_account_with_base64_data(default_token_account_address, 1, Pubkey::default(), "");
    let (mut banks_client, payer, recent_blockhash) = tc.start().await;

    let mut transaction = Transaction::new_with_payer(
        &[instruction::exists(
            &default_token_account_address,
            &user_wallet_address,
            &token_mint_address,
        )],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);

    assert_eq!(
        banks_client
            .process_transaction(transaction)
            .await
            .unwrap_err()
            .unwrap(),
        TransactionError::InstructionError(0, InstructionError::InvalidAccountData)
    );
}

#[tokio::test]
async fn test_exists_owner_mismatch() {
    let token_mint_address = Pubkey::new_unique();
    let (mut banks_client, payer, recent_blockhash) = program_test_with_mint(token_mint_address).start().await;

    let user_wallet_address = payer.pubkey();
    let default_token_account_address = get_default_token_account_address(
        &id(),
        &spl_token::id(),
        &token_mint_address,
        &user_wallet_address,
    );

    let mut transaction = Transaction::new_with_payer(
        &[
            instruction::create(
                &default_token_account_address,
                &user_wallet_address,
                &token_mint_address,
                &payer.pubkey(),
            ),
            spl_token::instruction::set_authority(
                &spl_token::id(),
                &default_token_account_address,
                Some(&Pubkey::new_unique()), // <-- assign the default token account to another user
                spl_token::instruction::AuthorityType::AccountOwner,
                &user_wallet_address,
                &[],
            )
            .unwrap(),
        ],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);
    banks_client.process_transaction(transaction).await.unwrap();

    let mut transaction = Transaction::new_with_payer(
        &[instruction::exists(
            &default_token_account_address,
            &user_wallet_address,
            &token_mint_address,
        )],
        Some(&payer.pubkey()),
    );
    transaction.sign(&[&payer], recent_blockhash);

    assert_eq!(
        banks_client
            .process_transaction(transaction)
            .await
            .unwrap_err()
            .unwrap(),
        TransactionError::InstructionError(0, DefaultTokenAccountError::TokenOwnerMismatch.into())
    );
}
