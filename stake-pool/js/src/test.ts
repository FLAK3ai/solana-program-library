import * as index from './index.js';
import * as schema from './schema.js';
import BN from 'bn.js';
import assert from 'assert';

describe('schema.decode', () => {
    describe('StakePoolAccount', () => {
        it('should successfully decode an account', () => {
            const decodedData = schema.StakePoolAccount.decode(new Buffer('014f962536a1b5b3a1f1036599ca7c164d6ad0677fed896f12ecdd09ada2cd23dc4f962536a1b5b3a1f1036599ca7c164d6ad0677fed896f12ecdd09ada2cd23dcbb09705cd25f4ad3b9e2c78e3f62ba3e290f798150499edc4f851a1a45e71159ff1086831390e666d64d18cac8f0c86eb91d799eda647319634280b89548ba0371ee618745ef3ebb93164e66ac3560e934b04e49b89ad38baa3b104284abb1a574003e566772f55676cf243c647fab463afa138cb156d2080062d2957b10bf22870fdbe150fc449db6268eb9214a848a90162d9bd4bb81e722cacb41d3dcb483b706ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a9000000000000000000000000000000007c00000000000000e8030000000000003800000000000000', 'hex'))
            console.log(decodedData)
            // TODO
            assert.equal(1, 2)
        })
    })

    describe('ValidatorListAccount', () => {
        it('should successfully decode ValidatorListAccount data', () => {
            const decodedData = schema.ValidatorListAccount.decode(new Buffer('020ahex'))
            console.log(decodedData)
            // TODO
            assert.equal(1, 2)
        })
    })
})

describe('PrettyPrintPubkey', () => {
    it('should successfully pretty print a pubkey', () => {
        assert.equal(index.prettyPrintPubKey(new schema.PublicKey({ 'value': new BN("99572085579321386496717000324290408927851378839748241098946587626478579848783") })), "6MfzrQUzB2mozveRWU9a77zMoQzSrYa4Gq46KswjupQB");
    });
});
