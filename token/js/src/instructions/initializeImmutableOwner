import { struct, u8 } from '@solana/buffer-layout';
import { publicKey } from '@solana/buffer-layout-utils';
import { AccountMeta, PublicKey, TransactionInstruction } from '@solana/web3.js';
import {
    TokenInvalidInstructionDataError,
    TokenInvalidInstructionKeysError,
    TokenInvalidInstructionProgramError,
    TokenInvalidInstructionTypeError,
} from '../errors';
import { TokenInstruction } from './types';

/** TODO: docs */
export interface InitializeImmutableOwnerInstructionData {
    instruction: TokenInstruction.InitializeImmutableOwner;
    immutableOwnerOption: 1 | 0;
    immutableOwner: PublicKey;
}

/** TODO: docs */
export const initializeImmutableOwnerInstructionData = struct<InitializeImmutableOwnerInstructionData>([
    u8('instruction'),
    u8('immutableOwnerOption'),
    publicKey('immutableOWner'),
]);

/**
 * Construct an InitializeImmutableOwner instruction
 *
 * @param mint            Token mint account
 * @param immutableOwner  Optional owner that is immutable
 * @param programId       SPL Token program account
 *
 * @return Instruction to add to a transaction
 */
export function createInitializImmutableOwnerInstruction(
    mint: PublicKey,
    immutableOwner: PublicKey | null,
    programId: PublicKey
): TransactionInstruction {
    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];

    const data = Buffer.alloc(initializeImmutableOwnerInstructionData.span);
    initializeImmutableOwnerInstructionData.encode(
        {
            instruction: TokenInstruction.InitializeImmutableOwner,
            immutableOwnerOption: immutableOwner ? 1 : 0,
            immutableOwner: immutableOwner || new PublicKey(0),
        },
        data
    );

    return new TransactionInstruction({ keys, programId, data });
}

/** A decoded, valid InitializImmutableOwner instruction */
export interface DecodedInitializeImmutableOwnerInstruction {
    programId: PublicKey;
    keys: {
        mint: AccountMeta;
    };
    data: {
        instruction: TokenInstruction.InitializeImmutableOwner;
        immutableOwner: PublicKey | null;
    };
}

/**
 * Decode an InitializeImmutableOwner instruction and validate it
 *
 * @param instruction Transaction instruction to decode
 * @param programId   SPL Token program account
 *
 * @return Decoded, valid instruction
 */
export function decodeInitializeImmutableOwnerInstruction(
    instruction: TransactionInstruction,
    programId: PublicKey
): DecodedInitializeImmutableOwnerInstruction {
    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();
    if (instruction.data.length !== initializeImmutableOwnerInstructionData.span)
        throw new TokenInvalidInstructionDataError();

    const {
        keys: { mint },
        data,
    } = decodeInitializeImmutableOwnerInstructionUnchecked(instruction);
    if (data.instruction !== TokenInstruction.InitializeImmutableOwner)
        throw new TokenInvalidInstructionTypeError();
    if (!mint) throw new TokenInvalidInstructionKeysError();

    return {
        programId,
        keys: {
            mint,
        },
        data,
    };
}

/** A decoded, non-validated InitializeImmutableOwner instruction */
export interface DecodedInitializeImmutableOwnerInstructionUnchecked {
    programId: PublicKey;
    keys: {
        mint: AccountMeta | undefined;
    };
    data: {
        instruction: number;
        immutableOwner: PublicKey | null;
    };
}

/**
 * Decode an InitializeImmutableOwner instruction without validating it
 *
 * @param instruction Transaction instruction to decode
 *
 * @return Decoded, non-validated instruction
 */
export function decodeInitializeImmutableOwnerInstructionUnchecked({
    programId,
    keys: [mint],
    data,
}: TransactionInstruction): DecodedInitializeImmutableOwnerInstructionUnchecked {
    const { instruction, immutableOwnerOption, immutableOwner } =
        initializeImmutableOwnerInstructionData.decode(data);

    return {
        programId,
        keys: {
            mint,
        },
        data: {
            instruction,
            immutableOwner: immutableOwnerOption ? immutableOwner : null,
        },
    };
}